{
  "security": [
    {
      "jwt": []
    }
  ],
  "components": {
    "securitySchemes": {
      "jwt": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter your JWT token in the format: Bearer <JWT>"
      }
    },
    "schemas": {
      "SchemaMeta": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Error code"
          },
          "status": {
            "type": "string",
            "description": "Error name"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "errors": {
            "type": "object",
            "description": "Errors",
            "additionalProperties": {}
          }
        },
        "additionalProperties": false
      },
      "SchemaMeta1": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "total_pages": {
            "type": "integer"
          },
          "first_page": {
            "type": "integer"
          },
          "last_page": {
            "type": "integer"
          },
          "page": {
            "type": "integer"
          },
          "previous_page": {
            "type": "integer"
          },
          "next_page": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "Login": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "demouser@demo.com",
            "description": "User email"
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "example": "changeme",
            "description": "User password"
          }
        },
        "required": [
          "email",
          "password"
        ],
        "additionalProperties": false
      },
      "SessionBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "additionalProperties": false
      },
      "UserDetail": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string",
            "readOnly": true
          },
          "id": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "company_name": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "image_url": {
            "type": "string",
            "nullable": true
          },
          "social_links": {},
          "privacy_settings": {},
          "is_active": {
            "type": "boolean"
          },
          "email_verified": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "events": {
            "readOnly": true
          },
          "speaking_sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionBase"
            }
          }
        },
        "required": [
          "email",
          "first_name",
          "last_name"
        ],
        "additionalProperties": false
      },
      "Signup": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "company_name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "first_name",
          "last_name",
          "password"
        ],
        "additionalProperties": false
      },
      "SignupResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "requires_verification": {
            "type": "boolean"
          }
        },
        "required": [
          "email",
          "message",
          "requires_verification"
        ],
        "additionalProperties": false
      },
      "EmailVerificationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "message"
        ],
        "additionalProperties": false
      },
      "ResendVerification": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          }
        },
        "required": [
          "email"
        ],
        "additionalProperties": false
      },
      "ForgotPassword": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          }
        },
        "required": [
          "email"
        ],
        "additionalProperties": false
      },
      "ValidateResetTokenResponse": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "valid"
        ],
        "additionalProperties": false
      },
      "ResetPassword": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "password",
          "token"
        ],
        "additionalProperties": false
      },
      "VerifyPassword": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "password"
        ],
        "additionalProperties": false
      },
      "ChangePassword": {
        "type": "object",
        "properties": {
          "current_password": {
            "type": "string",
            "writeOnly": true
          },
          "new_password": {
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "current_password",
          "new_password"
        ],
        "additionalProperties": false
      },
      "PrivacyAwareUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "readOnly": true
          },
          "last_name": {
            "type": "string",
            "readOnly": true
          },
          "full_name": {
            "type": "string",
            "readOnly": true
          },
          "image_url": {
            "type": "string",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "company_name": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "title": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "bio": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "social_links": {
            "type": "object",
            "readOnly": true,
            "additionalProperties": {}
          },
          "allow_connection_requests": {
            "type": "string",
            "readOnly": true
          },
          "can_send_connection_request": {
            "type": "boolean",
            "readOnly": true
          },
          "is_connected": {
            "type": "boolean",
            "readOnly": true
          },
          "event_role": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "speaker_bio": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "speaker_title": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "privacy_settings": {
            "type": "object",
            "readOnly": true,
            "additionalProperties": {},
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "is_active": {
            "type": "boolean",
            "readOnly": true,
            "nullable": true
          },
          "email_verified": {
            "type": "boolean",
            "readOnly": true,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "company_name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "image_url": {
            "type": "string",
            "format": "url"
          },
          "social_links": {
            "type": "object",
            "additionalProperties": {}
          }
        },
        "additionalProperties": false
      },
      "DashboardUserSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "readOnly": true
          },
          "last_name": {
            "type": "string",
            "readOnly": true
          },
          "full_name": {
            "type": "string",
            "readOnly": true
          },
          "company_name": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "title": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "bio": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "image_url": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DashboardStatsSchema": {
        "type": "object",
        "properties": {
          "events_hosted": {
            "type": "integer",
            "readOnly": true
          },
          "attendees_reached": {
            "type": "integer",
            "readOnly": true
          },
          "connections_made": {
            "type": "integer",
            "readOnly": true
          },
          "events_attended": {
            "type": "integer",
            "readOnly": true
          },
          "organizations_count": {
            "type": "integer",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DashboardOrganizationSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "role": {
            "type": "string",
            "readOnly": true
          },
          "event_count": {
            "type": "integer",
            "readOnly": true
          },
          "member_count": {
            "type": "integer",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DashboardEventSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "nullable": true
          },
          "location": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "status": {
            "type": "string",
            "readOnly": true
          },
          "attendee_count": {
            "type": "integer",
            "readOnly": true
          },
          "organization": {
            "type": "object",
            "readOnly": true,
            "additionalProperties": {}
          },
          "user_role": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DashboardConnectionUserSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "readOnly": true
          },
          "display_name": {
            "type": "string",
            "readOnly": true
          },
          "avatar_url": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DashboardConnectionSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "user": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/DashboardConnectionUserSchema"
              }
            ]
          },
          "company": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "title": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "connected_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DashboardNewsSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "readOnly": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "is_new": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DashboardResponseSchema": {
        "type": "object",
        "properties": {
          "user": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/DashboardUserSchema"
              }
            ]
          },
          "stats": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/DashboardStatsSchema"
              }
            ]
          },
          "organizations": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/DashboardOrganizationSchema"
            }
          },
          "events": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/DashboardEventSchema"
            }
          },
          "connections": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/DashboardConnectionSchema"
            }
          },
          "news": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/DashboardNewsSchema"
            }
          }
        },
        "additionalProperties": false
      },
      "InvitationInviterSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationInvitationSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "organization": {
            "type": "object",
            "readOnly": true,
            "additionalProperties": {}
          },
          "role": {
            "type": "string",
            "readOnly": true
          },
          "invited_by": {
            "readOnly": true,
            "anyOf": [
              {
                "$ref": "#/components/schemas/InvitationInviterSchema"
              },
              {
                "type": "object",
                "nullable": true
              }
            ]
          },
          "message": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "token": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "EventInvitationSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "event": {
            "type": "object",
            "readOnly": true,
            "additionalProperties": {}
          },
          "role": {
            "type": "string",
            "readOnly": true
          },
          "invited_by": {
            "readOnly": true,
            "anyOf": [
              {
                "$ref": "#/components/schemas/InvitationInviterSchema"
              },
              {
                "type": "object",
                "nullable": true
              }
            ]
          },
          "message": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "token": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserInvitationsResponseSchema": {
        "type": "object",
        "properties": {
          "organization_invitations": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/OrganizationInvitationSchema"
            }
          },
          "event_invitations": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/EventInvitationSchema"
            }
          },
          "total_count": {
            "type": "integer",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserPrivacyResponse": {
        "type": "object",
        "properties": {
          "privacy_settings": {
            "type": "object",
            "additionalProperties": {}
          },
          "event_overrides": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "object",
              "additionalProperties": {}
            }
          }
        },
        "additionalProperties": false
      },
      "PrivacySettingsUpdate": {
        "type": "object",
        "properties": {
          "email_visibility": {
            "enum": [
              "event_attendees",
              "connections_organizers",
              "organizers_only",
              null
            ],
            "nullable": true
          },
          "show_public_email": {
            "type": "boolean",
            "nullable": true
          },
          "public_email": {
            "type": "string",
            "nullable": true
          },
          "allow_connection_requests": {
            "enum": [
              "event_attendees",
              "speakers_organizers",
              "none",
              null
            ],
            "nullable": true
          },
          "show_social_links": {
            "enum": [
              "event_attendees",
              "connections",
              "hidden",
              null
            ],
            "nullable": true
          },
          "show_company": {
            "type": "boolean",
            "nullable": true
          },
          "show_bio": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PrivacySettingsResponse": {
        "type": "object",
        "properties": {
          "event_id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "user_id": {
            "type": "integer",
            "readOnly": true
          },
          "privacy_overrides": {
            "type": "object",
            "readOnly": true,
            "additionalProperties": {}
          },
          "privacy_settings": {
            "type": "object",
            "readOnly": true,
            "additionalProperties": {},
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserBasic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "first_name",
          "last_name"
        ],
        "additionalProperties": false
      },
      "UserCheckResponse": {
        "type": "object",
        "properties": {
          "user": {
            "anyOf": [
              {
                "type": "object",
                "nullable": true
              },
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "OrganizationUserNestedSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "full_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "MEMBER",
              "OWNER"
            ]
          },
          "user_name": {
            "type": "string",
            "readOnly": true
          },
          "user_email": {
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventNestedSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "status": {
            "maxLength": 9,
            "type": "string",
            "enum": [
              "DRAFT",
              "PUBLISHED",
              "ARCHIVED",
              "DELETED"
            ]
          }
        },
        "required": [
          "start_date",
          "title"
        ],
        "additionalProperties": false
      },
      "OrganizationDetail": {
        "type": "object",
        "properties": {
          "users": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationUserNestedSchema"
            }
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "member_count": {
            "type": "integer",
            "readOnly": true
          },
          "owner_count": {
            "type": "integer",
            "readOnly": true
          },
          "user_is_admin_or_owner": {
            "type": "boolean",
            "readOnly": true
          },
          "current_user_role": {
            "readOnly": true
          },
          "upcoming_events": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventNestedSchema"
            }
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false
      },
      "OrganizationUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "OrganizationCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false
      },
      "AddUserToOrg": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "MEMBER",
              "OWNER"
            ]
          }
        },
        "required": [
          "email",
          "first_name",
          "last_name",
          "role"
        ],
        "additionalProperties": false
      },
      "OrganizationBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false
      },
      "UserBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "full_name": {
            "type": "string",
            "readOnly": true
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "additionalProperties": false
      },
      "OrganizationUserDetail": {
        "type": "object",
        "properties": {
          "user_name": {
            "type": "string",
            "readOnly": true
          },
          "is_owner": {
            "type": "boolean",
            "readOnly": true
          },
          "is_admin": {
            "type": "boolean",
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "readOnly": true
          },
          "last_name": {
            "type": "string",
            "readOnly": true
          },
          "sort_name": {
            "type": "string",
            "readOnly": true
          },
          "image_url": {
            "type": "string",
            "readOnly": true
          },
          "social_links": {
            "type": "object",
            "readOnly": true,
            "additionalProperties": {}
          },
          "email": {
            "type": "string",
            "readOnly": true
          },
          "organization_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "role": {
            "maxLength": 6,
            "type": "string",
            "enum": [
              "ADMIN",
              "MEMBER",
              "OWNER"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "organization": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationBase"
              }
            ]
          },
          "user": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBase"
              }
            ]
          }
        },
        "required": [
          "organization_id",
          "role",
          "user_id"
        ],
        "additionalProperties": false
      },
      "OrganizationUserUpdate": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "MEMBER",
              "OWNER"
            ]
          }
        },
        "required": [
          "role"
        ],
        "additionalProperties": false
      },
      "OrganizationInvitationCreate": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "MEMBER",
              "OWNER"
            ]
          },
          "message": {
            "type": "string",
            "maxLength": 500,
            "nullable": true
          }
        },
        "required": [
          "email",
          "role"
        ],
        "additionalProperties": false
      },
      "OrganizationInvitationDetail": {
        "type": "object",
        "properties": {
          "is_expired": {
            "type": "boolean",
            "readOnly": true
          },
          "is_pending": {
            "type": "boolean",
            "readOnly": true
          },
          "id": {
            "type": "integer"
          },
          "organization_id": {
            "type": "integer"
          },
          "email": {
            "type": "string",
            "maxLength": 255
          },
          "role": {
            "maxLength": 6,
            "type": "string",
            "enum": [
              "ADMIN",
              "MEMBER",
              "OWNER"
            ]
          },
          "status": {
            "maxLength": 9,
            "type": "string",
            "enum": [
              "PENDING",
              "ACCEPTED",
              "EXPIRED",
              "DECLINED",
              "CANCELLED"
            ]
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "invited_by_id": {
            "type": "integer",
            "nullable": true
          },
          "user_id": {
            "type": "integer",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "accepted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "declined_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "organization": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationBase"
              }
            ]
          },
          "invited_by": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBase"
              }
            ]
          },
          "user": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBase"
              }
            ]
          }
        },
        "required": [
          "email",
          "expires_at",
          "organization_id",
          "role"
        ],
        "additionalProperties": false
      },
      "BulkOrganizationInvitationCreate": {
        "type": "object",
        "properties": {
          "invitations": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "$ref": "#/components/schemas/OrganizationInvitationCreate"
            }
          }
        },
        "required": [
          "invitations"
        ],
        "additionalProperties": false
      },
      "OrganizationInvitationAccept": {
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "EventCreate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "event_type": {
            "type": "string",
            "enum": [
              "CONFERENCE",
              "SINGLE_SESSION"
            ]
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date"
          },
          "timezone": {
            "type": "string"
          },
          "company_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "default": "DRAFT",
            "type": "string",
            "enum": [
              "DRAFT",
              "PUBLISHED",
              "ARCHIVED",
              "DELETED"
            ]
          },
          "branding": {
            "type": "object",
            "default": {
              "primary_color": "#000000",
              "secondary_color": "#ffffff",
              "logo_url": null,
              "banner_url": null
            },
            "additionalProperties": {}
          }
        },
        "required": [
          "company_name",
          "end_date",
          "event_type",
          "start_date",
          "timezone",
          "title"
        ],
        "additionalProperties": false
      },
      "SessionBase1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "start_time": {
            "type": "string"
          },
          "end_time": {
            "type": "string"
          },
          "day_number": {
            "type": "integer"
          },
          "session_type": {
            "maxLength": 12,
            "type": "string",
            "enum": [
              "KEYNOTE",
              "WORKSHOP",
              "PANEL",
              "PRESENTATION",
              "NETWORKING",
              "QA"
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "day_number",
          "end_time",
          "session_type",
          "start_time",
          "title"
        ],
        "additionalProperties": false
      },
      "UserWithRole": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "full_name": {
            "type": "string",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "readOnly": true
          },
          "role": {
            "readOnly": true,
            "type": "string",
            "enum": [
              "ADMIN",
              "ORGANIZER",
              "MODERATOR",
              "SPEAKER",
              "ATTENDEE"
            ]
          }
        },
        "additionalProperties": false
      },
      "UserBase1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "full_name": {
            "type": "string",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "company_name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SessionMinimal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "readOnly": true
          },
          "day_number": {
            "type": "integer",
            "readOnly": true
          },
          "start_time": {
            "type": "string",
            "readOnly": true
          },
          "end_time": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "EventDetail": {
        "type": "object",
        "properties": {
          "is_published": {
            "type": "boolean",
            "readOnly": true
          },
          "is_upcoming": {
            "type": "boolean",
            "readOnly": true
          },
          "is_ongoing": {
            "type": "boolean",
            "readOnly": true
          },
          "is_past": {
            "type": "boolean",
            "readOnly": true
          },
          "day_count": {
            "type": "integer",
            "readOnly": true
          },
          "first_session_time": {
            "type": "string",
            "readOnly": true
          },
          "last_session_time": {
            "type": "string",
            "readOnly": true
          },
          "event_hours": {
            "type": "object",
            "readOnly": true,
            "additionalProperties": {}
          },
          "user_role": {
            "type": "string",
            "readOnly": true
          },
          "main_session_id": {
            "type": "integer",
            "readOnly": true
          },
          "id": {
            "type": "integer"
          },
          "organization_id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "event_type": {
            "maxLength": 14,
            "type": "string",
            "enum": [
              "CONFERENCE",
              "SINGLE_SESSION"
            ]
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date"
          },
          "timezone": {
            "type": "string",
            "maxLength": 50
          },
          "company_name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "status": {
            "maxLength": 9,
            "type": "string",
            "enum": [
              "DRAFT",
              "PUBLISHED",
              "ARCHIVED",
              "DELETED"
            ]
          },
          "branding": {},
          "hero_description": {
            "type": "string",
            "nullable": true
          },
          "hero_images": {
            "nullable": true
          },
          "event_format": {
            "maxLength": 9,
            "type": "string",
            "enum": [
              "VIRTUAL",
              "IN_PERSON",
              "HYBRID"
            ]
          },
          "is_private": {
            "type": "boolean",
            "nullable": true
          },
          "venue_name": {
            "type": "string",
            "maxLength": 255,
            "nullable": true
          },
          "venue_address": {
            "type": "string",
            "nullable": true
          },
          "venue_city": {
            "type": "string",
            "maxLength": 100,
            "nullable": true
          },
          "venue_state": {
            "maxLength": 2,
            "type": "string",
            "enum": [
              "AL",
              "AK",
              "AZ",
              "AR",
              "CA",
              "CO",
              "CT",
              "DE",
              "FL",
              "GA",
              "HI",
              "ID",
              "IL",
              "IN",
              "IA",
              "KS",
              "KY",
              "LA",
              "ME",
              "MD",
              "MA",
              "MI",
              "MN",
              "MS",
              "MO",
              "MT",
              "NE",
              "NV",
              "NH",
              "NJ",
              "NM",
              "NY",
              "NC",
              "ND",
              "OH",
              "OK",
              "OR",
              "PA",
              "RI",
              "SC",
              "SD",
              "TN",
              "TX",
              "UT",
              "VT",
              "VA",
              "WA",
              "WV",
              "WI",
              "WY",
              "DC",
              null
            ],
            "nullable": true
          },
          "venue_country": {
            "type": "string",
            "maxLength": 100,
            "nullable": true
          },
          "sections": {
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deleted_by_id": {
            "type": "integer",
            "nullable": true
          },
          "icebreakers": {
            "nullable": true
          },
          "sponsor_tiers": {
            "nullable": true
          },
          "sponsors_count": {
            "type": "integer",
            "readOnly": true
          },
          "organization": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationBase"
              }
            ]
          },
          "sessions": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionBase1"
            }
          },
          "organizers": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserWithRole"
            }
          },
          "speakers": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBase1"
            }
          },
          "main_session": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionMinimal"
              }
            ]
          }
        },
        "required": [
          "company_name",
          "end_date",
          "event_type",
          "organization_id",
          "slug",
          "start_date",
          "title"
        ],
        "additionalProperties": false
      },
      "EventUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "event_type": {
            "type": "string",
            "enum": [
              "CONFERENCE",
              "SINGLE_SESSION"
            ]
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date"
          },
          "timezone": {
            "type": "string"
          },
          "company_name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "PUBLISHED",
              "ARCHIVED",
              "DELETED"
            ]
          },
          "branding": {
            "type": "object",
            "additionalProperties": {}
          },
          "event_format": {
            "type": "string",
            "enum": [
              "VIRTUAL",
              "IN_PERSON",
              "HYBRID"
            ]
          },
          "is_private": {
            "type": "boolean"
          },
          "venue_name": {
            "type": "string",
            "nullable": true
          },
          "venue_address": {
            "type": "string",
            "nullable": true
          },
          "venue_city": {
            "type": "string",
            "nullable": true
          },
          "venue_state": {
            "type": "string",
            "enum": [
              "AL",
              "AK",
              "AZ",
              "AR",
              "CA",
              "CO",
              "CT",
              "DE",
              "FL",
              "GA",
              "HI",
              "ID",
              "IL",
              "IN",
              "IA",
              "KS",
              "KY",
              "LA",
              "ME",
              "MD",
              "MA",
              "MI",
              "MN",
              "MS",
              "MO",
              "MT",
              "NE",
              "NV",
              "NH",
              "NJ",
              "NM",
              "NY",
              "NC",
              "ND",
              "OH",
              "OK",
              "OR",
              "PA",
              "RI",
              "SC",
              "SD",
              "TN",
              "TX",
              "UT",
              "VT",
              "VA",
              "WA",
              "WV",
              "WI",
              "WY",
              "DC",
              null
            ],
            "nullable": true
          },
          "venue_country": {
            "type": "string",
            "nullable": true
          },
          "hero_description": {
            "type": "string",
            "nullable": true
          },
          "hero_images": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "sections": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "icebreakers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "main_session_id": {
            "type": "integer",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventBranding": {
        "type": "object",
        "properties": {
          "primary_color": {
            "type": "string"
          },
          "secondary_color": {
            "type": "string"
          },
          "logo_url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddUserToEvent": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "ORGANIZER",
              "MODERATOR",
              "SPEAKER",
              "ATTENDEE"
            ]
          }
        },
        "required": [
          "email",
          "first_name",
          "last_name",
          "role"
        ],
        "additionalProperties": false
      },
      "EventBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "additionalProperties": false
      },
      "UserBase2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "full_name": {
            "type": "string",
            "readOnly": true
          },
          "email": {
            "type": "string"
          },
          "image_url": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "email"
        ],
        "additionalProperties": false
      },
      "EventUserDetail": {
        "type": "object",
        "properties": {
          "user_name": {
            "type": "string",
            "readOnly": true
          },
          "is_speaker": {
            "type": "boolean",
            "readOnly": true
          },
          "is_organizer": {
            "type": "boolean",
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "readOnly": true
          },
          "last_name": {
            "type": "string",
            "readOnly": true
          },
          "sort_name": {
            "type": "string",
            "readOnly": true
          },
          "image_url": {
            "type": "string",
            "readOnly": true
          },
          "social_links": {
            "type": "object",
            "readOnly": true,
            "additionalProperties": {}
          },
          "company_name": {
            "type": "string",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "readOnly": true
          },
          "connection_status": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "connection_id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "connection_direction": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "event_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "role": {
            "maxLength": 9,
            "type": "string",
            "enum": [
              "ADMIN",
              "ORGANIZER",
              "MODERATOR",
              "SPEAKER",
              "ATTENDEE"
            ]
          },
          "speaker_bio": {
            "type": "string",
            "nullable": true
          },
          "speaker_title": {
            "type": "string",
            "nullable": true
          },
          "privacy_overrides": {
            "nullable": true
          },
          "is_banned": {
            "type": "boolean"
          },
          "banned_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "banned_by": {
            "type": "integer",
            "nullable": true
          },
          "ban_reason": {
            "type": "string",
            "nullable": true
          },
          "is_chat_banned": {
            "type": "boolean"
          },
          "chat_ban_until": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "chat_ban_reason": {
            "type": "string",
            "nullable": true
          },
          "moderation_notes": {
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "event": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/EventBase"
              }
            ]
          },
          "user": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBase2"
              }
            ]
          }
        },
        "required": [
          "event_id",
          "role",
          "user_id"
        ],
        "additionalProperties": false
      },
      "EventUserCreate": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "ORGANIZER",
              "MODERATOR",
              "SPEAKER",
              "ATTENDEE"
            ]
          },
          "speaker_bio": {
            "type": "string"
          },
          "speaker_title": {
            "type": "string"
          }
        },
        "required": [
          "role",
          "user_id"
        ],
        "additionalProperties": false
      },
      "EventUserUpdate": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "ORGANIZER",
              "MODERATOR",
              "SPEAKER",
              "ATTENDEE"
            ]
          },
          "speaker_bio": {
            "type": "string"
          },
          "speaker_title": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EventSpeakerInfoUpdate": {
        "type": "object",
        "properties": {
          "speaker_bio": {
            "type": "string"
          },
          "speaker_title": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EventInvitationCreate": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "ORGANIZER",
              "MODERATOR",
              "SPEAKER",
              "ATTENDEE"
            ]
          },
          "message": {
            "type": "string",
            "maxLength": 500,
            "nullable": true
          }
        },
        "required": [
          "email",
          "role"
        ],
        "additionalProperties": false
      },
      "EventInvitationDetail": {
        "type": "object",
        "properties": {
          "is_expired": {
            "type": "boolean",
            "readOnly": true
          },
          "is_pending": {
            "type": "boolean",
            "readOnly": true
          },
          "id": {
            "type": "integer"
          },
          "event_id": {
            "type": "integer"
          },
          "email": {
            "type": "string",
            "maxLength": 255
          },
          "role": {
            "maxLength": 9,
            "type": "string",
            "enum": [
              "ADMIN",
              "ORGANIZER",
              "MODERATOR",
              "SPEAKER",
              "ATTENDEE"
            ]
          },
          "status": {
            "maxLength": 9,
            "type": "string",
            "enum": [
              "PENDING",
              "ACCEPTED",
              "EXPIRED",
              "DECLINED",
              "CANCELLED"
            ]
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "invited_by_id": {
            "type": "integer",
            "nullable": true
          },
          "user_id": {
            "type": "integer",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "accepted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "declined_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "event": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/EventBase"
              }
            ]
          },
          "invited_by": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBase"
              }
            ]
          },
          "user": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBase"
              }
            ]
          }
        },
        "required": [
          "email",
          "event_id",
          "expires_at",
          "role"
        ],
        "additionalProperties": false
      },
      "BulkEventInvitationCreate": {
        "type": "object",
        "properties": {
          "invitations": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "$ref": "#/components/schemas/EventInvitationCreate"
            }
          }
        },
        "required": [
          "invitations"
        ],
        "additionalProperties": false
      },
      "EventInvitationAccept": {
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "SessionCreate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "session_type": {
            "type": "string",
            "enum": [
              "KEYNOTE",
              "WORKSHOP",
              "PANEL",
              "PRESENTATION",
              "NETWORKING",
              "QA"
            ]
          },
          "status": {
            "default": "SCHEDULED",
            "type": "string",
            "enum": [
              "SCHEDULED",
              "STARTING_SOON",
              "LIVE",
              "COMPLETED",
              "CANCELLED"
            ]
          },
          "short_description": {
            "type": "string",
            "maxLength": 200
          },
          "description": {
            "type": "string"
          },
          "start_time": {
            "type": "string"
          },
          "end_time": {
            "type": "string"
          },
          "stream_url": {
            "type": "string"
          },
          "day_number": {
            "type": "integer"
          },
          "chat_mode": {
            "default": "ENABLED",
            "type": "string",
            "enum": [
              "ENABLED",
              "BACKSTAGE_ONLY",
              "DISABLED"
            ]
          }
        },
        "required": [
          "day_number",
          "end_time",
          "session_type",
          "start_time",
          "title"
        ],
        "additionalProperties": false
      },
      "EventBase1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date"
          }
        },
        "required": [
          "end_date",
          "start_date",
          "title"
        ],
        "additionalProperties": false
      },
      "SessionSpeakerSchema": {
        "type": "object",
        "properties": {
          "speaker_name": {
            "type": "string",
            "readOnly": true
          },
          "image_url": {
            "readOnly": true
          },
          "title": {
            "readOnly": true
          },
          "company_name": {
            "readOnly": true
          },
          "social_links": {
            "readOnly": true
          },
          "session_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "role": {
            "maxLength": 9,
            "type": "string",
            "enum": [
              "HOST",
              "SPEAKER",
              "PANELIST",
              "MODERATOR",
              "KEYNOTE"
            ]
          },
          "order": {
            "type": "integer",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "role",
          "session_id",
          "user_id"
        ],
        "additionalProperties": false
      },
      "SessionDetail": {
        "type": "object",
        "properties": {
          "duration_minutes": {
            "type": "integer",
            "readOnly": true
          },
          "formatted_duration": {
            "type": "string",
            "readOnly": true
          },
          "is_live": {
            "type": "boolean",
            "readOnly": true
          },
          "is_completed": {
            "type": "boolean",
            "readOnly": true
          },
          "is_cancelled": {
            "type": "boolean",
            "readOnly": true
          },
          "is_upcoming": {
            "type": "boolean",
            "readOnly": true
          },
          "is_in_progress": {
            "type": "boolean",
            "readOnly": true
          },
          "chat_mode": {
            "type": "string",
            "enum": [
              "ENABLED",
              "BACKSTAGE_ONLY",
              "DISABLED"
            ]
          },
          "has_chat_enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "has_public_chat_enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "has_backstage_chat_enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "id": {
            "type": "integer"
          },
          "event_id": {
            "type": "integer"
          },
          "status": {
            "maxLength": 13,
            "type": "string",
            "enum": [
              "SCHEDULED",
              "STARTING_SOON",
              "LIVE",
              "COMPLETED",
              "CANCELLED"
            ]
          },
          "session_type": {
            "maxLength": 12,
            "type": "string",
            "enum": [
              "KEYNOTE",
              "WORKSHOP",
              "PANEL",
              "PRESENTATION",
              "NETWORKING",
              "QA"
            ]
          },
          "title": {
            "type": "string"
          },
          "short_description": {
            "type": "string",
            "maxLength": 200,
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "start_time": {
            "type": "string"
          },
          "end_time": {
            "type": "string"
          },
          "stream_url": {
            "type": "string",
            "nullable": true
          },
          "day_number": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "event": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/EventBase1"
              }
            ]
          },
          "session_speakers": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionSpeakerSchema"
            }
          }
        },
        "required": [
          "day_number",
          "end_time",
          "event_id",
          "session_type",
          "start_time",
          "status",
          "title"
        ],
        "additionalProperties": false
      },
      "SessionUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "session_type": {
            "type": "string",
            "enum": [
              "KEYNOTE",
              "WORKSHOP",
              "PANEL",
              "PRESENTATION",
              "NETWORKING",
              "QA"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "SCHEDULED",
              "STARTING_SOON",
              "LIVE",
              "COMPLETED",
              "CANCELLED"
            ]
          },
          "short_description": {
            "type": "string",
            "maxLength": 200
          },
          "description": {
            "type": "string"
          },
          "start_time": {
            "type": "string"
          },
          "end_time": {
            "type": "string"
          },
          "stream_url": {
            "type": "string"
          },
          "day_number": {
            "type": "integer"
          },
          "chat_mode": {
            "type": "string",
            "enum": [
              "ENABLED",
              "BACKSTAGE_ONLY",
              "DISABLED"
            ]
          }
        },
        "additionalProperties": false
      },
      "SessionStatusUpdate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SCHEDULED",
              "STARTING_SOON",
              "LIVE",
              "COMPLETED",
              "CANCELLED"
            ]
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "SessionTimesUpdate": {
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string"
          },
          "end_time": {
            "type": "string"
          }
        },
        "required": [
          "end_time",
          "start_time"
        ],
        "additionalProperties": false
      },
      "SessionChatRoom": {
        "type": "object",
        "properties": {
          "room_type": {
            "type": "string",
            "enum": [
              "GLOBAL",
              "PUBLIC",
              "BACKSTAGE",
              "ADMIN",
              "GREEN_ROOM"
            ]
          },
          "id": {
            "type": "integer"
          },
          "event_id": {
            "type": "integer"
          },
          "session_id": {
            "type": "integer",
            "nullable": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "maxLength": 500,
            "nullable": true
          },
          "is_enabled": {
            "type": "boolean"
          },
          "display_order": {
            "type": "number"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "message_count": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "event_id",
          "name"
        ],
        "additionalProperties": false
      },
      "SchemaMeta2": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer"
          },
          "role": {
            "type": "string",
            "enum": [
              "HOST",
              "SPEAKER",
              "PANELIST",
              "MODERATOR",
              "KEYNOTE"
            ]
          },
          "order": {
            "type": "integer"
          }
        },
        "required": [
          "role",
          "user_id"
        ],
        "additionalProperties": false
      },
      "SessionBase2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "start_time": {
            "type": "string"
          },
          "end_time": {
            "type": "string"
          },
          "day_number": {
            "type": "integer"
          }
        },
        "required": [
          "day_number",
          "end_time",
          "start_time",
          "title"
        ],
        "additionalProperties": false
      },
      "UserBase3": {
        "type": "object",
        "properties": {
          "bio": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SessionSpeakerDetailSchema": {
        "type": "object",
        "properties": {
          "speaker_name": {
            "type": "string",
            "readOnly": true
          },
          "image_url": {
            "readOnly": true
          },
          "title": {
            "readOnly": true
          },
          "company_name": {
            "readOnly": true
          },
          "social_links": {
            "readOnly": true
          },
          "session_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "role": {
            "maxLength": 9,
            "type": "string",
            "enum": [
              "HOST",
              "SPEAKER",
              "PANELIST",
              "MODERATOR",
              "KEYNOTE"
            ]
          },
          "order": {
            "type": "integer",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "session": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionBase2"
              }
            ]
          },
          "user": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBase3"
              }
            ]
          }
        },
        "required": [
          "role",
          "session_id",
          "user_id"
        ],
        "additionalProperties": false
      },
      "SchemaMeta3": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "HOST",
              "SPEAKER",
              "PANELIST",
              "MODERATOR",
              "KEYNOTE"
            ]
          },
          "order": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "SchemaMeta4": {
        "type": "object",
        "properties": {
          "order": {
            "type": "integer"
          }
        },
        "required": [
          "order"
        ],
        "additionalProperties": false
      },
      "ConnectionCreate": {
        "type": "object",
        "properties": {
          "recipient_id": {
            "type": "integer"
          },
          "icebreaker_message": {
            "type": "string"
          },
          "originating_event_id": {
            "type": "integer"
          }
        },
        "required": [
          "icebreaker_message",
          "recipient_id"
        ],
        "additionalProperties": false
      },
      "ConnectionBase": {
        "type": "object",
        "properties": {
          "requester": {
            "readOnly": true
          },
          "recipient": {
            "readOnly": true
          },
          "originating_event": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/EventBase"
              }
            ]
          },
          "id": {
            "type": "integer"
          },
          "requester_id": {
            "type": "integer"
          },
          "recipient_id": {
            "type": "integer"
          },
          "status": {
            "maxLength": 8,
            "type": "string",
            "enum": [
              "PENDING",
              "ACCEPTED",
              "REJECTED",
              "REMOVED",
              "BLOCKED",
              null
            ],
            "nullable": true
          },
          "icebreaker_message": {
            "type": "string"
          },
          "originating_event_id": {
            "type": "integer",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "icebreaker_message",
          "recipient_id",
          "requester_id"
        ],
        "additionalProperties": false
      },
      "ConnectionUpdate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "ACCEPTED",
              "REJECTED",
              "REMOVED",
              "BLOCKED"
            ]
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "ChatRoomCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "room_type": {
            "type": "string",
            "enum": [
              "GLOBAL",
              "PUBLIC",
              "BACKSTAGE",
              "ADMIN",
              "GREEN_ROOM"
            ]
          },
          "is_enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false
      },
      "ChatRoomDetail": {
        "type": "object",
        "properties": {
          "room_type": {
            "type": "string",
            "enum": [
              "GLOBAL",
              "PUBLIC",
              "BACKSTAGE",
              "ADMIN",
              "GREEN_ROOM"
            ]
          },
          "id": {
            "type": "integer"
          },
          "event_id": {
            "type": "integer"
          },
          "session_id": {
            "type": "integer",
            "nullable": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "maxLength": 500,
            "nullable": true
          },
          "is_enabled": {
            "type": "boolean"
          },
          "display_order": {
            "type": "number"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "event": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/EventBase"
              }
            ]
          },
          "session": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionBase"
              }
            ]
          }
        },
        "required": [
          "event_id",
          "name"
        ],
        "additionalProperties": false
      },
      "ChatRoomUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "display_order": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "ChatMessageCreate": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          }
        },
        "required": [
          "content"
        ],
        "additionalProperties": false
      },
      "UserBase4": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "full_name": {
            "type": "string",
            "readOnly": true
          },
          "image_url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserBase5": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "full_name": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ChatMessageBase": {
        "type": "object",
        "properties": {
          "user": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBase4"
              }
            ]
          },
          "deleted_by": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBase5"
              }
            ]
          },
          "is_deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "id": {
            "type": "integer"
          },
          "room_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "content": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deleted_by_id": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": [
          "content",
          "room_id",
          "user_id"
        ],
        "additionalProperties": false
      },
      "SchemaMeta5": {
        "type": "object",
        "properties": {
          "display_order": {
            "type": "number"
          }
        },
        "required": [
          "display_order"
        ],
        "additionalProperties": false
      },
      "DirectMessageThreadCreate": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer"
          },
          "event_id": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": [
          "user_id"
        ],
        "additionalProperties": false
      },
      "DirectMessageThreadBase": {
        "type": "object",
        "properties": {
          "user1": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBase2"
              }
            ]
          },
          "user2": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBase2"
              }
            ]
          },
          "last_message": {
            "readOnly": true
          },
          "unread_count": {
            "readOnly": true
          },
          "other_user": {
            "readOnly": true
          },
          "shared_event_ids": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "integer"
            }
          },
          "other_user_in_event": {
            "type": "boolean",
            "readOnly": true
          },
          "is_new": {
            "type": "boolean",
            "readOnly": true
          },
          "id": {
            "type": "integer"
          },
          "user1_id": {
            "type": "integer"
          },
          "user2_id": {
            "type": "integer"
          },
          "is_encrypted": {
            "type": "boolean",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "last_message_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "event_scope_id": {
            "type": "integer",
            "nullable": true
          },
          "user1_cutoff": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "user2_cutoff": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "user1_id",
          "user2_id"
        ],
        "additionalProperties": false
      },
      "FormattedMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "thread_id": {
            "type": "integer",
            "readOnly": true
          },
          "sender_id": {
            "type": "integer",
            "readOnly": true
          },
          "sender": {
            "type": "object",
            "readOnly": true,
            "additionalProperties": {}
          },
          "content": {
            "type": "string",
            "readOnly": true
          },
          "encrypted_content": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "status": {
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MessagePagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "readOnly": true
          },
          "per_page": {
            "type": "integer",
            "readOnly": true
          },
          "total": {
            "type": "integer",
            "readOnly": true
          },
          "total_pages": {
            "type": "integer",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ThreadUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "full_name": {
            "type": "string",
            "readOnly": true
          },
          "image_url": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DirectMessagesWithContext": {
        "type": "object",
        "properties": {
          "thread_id": {
            "type": "integer",
            "readOnly": true
          },
          "messages": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/FormattedMessage"
            }
          },
          "pagination": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MessagePagination"
              }
            ]
          },
          "other_user": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ThreadUser"
              }
            ]
          },
          "is_encrypted": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "required": [
          "is_encrypted",
          "messages",
          "other_user",
          "pagination",
          "thread_id"
        ],
        "additionalProperties": false
      },
      "DirectMessageCreate": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "encrypted_content": {
            "type": "string"
          }
        },
        "required": [
          "content"
        ],
        "additionalProperties": false
      },
      "DirectMessageBase": {
        "type": "object",
        "properties": {
          "sender": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBase2"
              }
            ]
          },
          "id": {
            "type": "integer"
          },
          "thread_id": {
            "type": "integer"
          },
          "sender_id": {
            "type": "integer"
          },
          "content": {
            "type": "string"
          },
          "encrypted_content": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "maxLength": 9,
            "type": "string",
            "enum": [
              "SENT",
              "DELIVERED",
              "READ",
              null
            ],
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "content",
          "sender_id",
          "thread_id"
        ],
        "additionalProperties": false
      },
      "MarkMessagesReadResponse": {
        "type": "object",
        "properties": {
          "thread_id": {
            "type": "integer",
            "readOnly": true
          },
          "marked_read": {
            "type": "boolean",
            "readOnly": true
          },
          "message": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "marked_read",
          "message",
          "thread_id"
        ],
        "additionalProperties": false
      },
      "SponsorListSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "website_url": {
            "type": "string"
          },
          "tier_id": {
            "type": "string"
          },
          "tier_name": {
            "type": "string"
          },
          "tier_order": {
            "type": "integer"
          },
          "tier_color": {
            "type": "string"
          },
          "display_order": {
            "type": "number"
          },
          "featured": {
            "type": "boolean"
          },
          "is_active": {
            "type": "boolean"
          },
          "social_links": {
            "type": "object",
            "additionalProperties": {}
          },
          "contact_name": {
            "type": "string"
          },
          "contact_email": {
            "type": "string"
          },
          "contact_phone": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SchemaMeta6": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "website_url": {
            "type": "string",
            "nullable": true
          },
          "logo_url": {
            "type": "string",
            "nullable": true
          },
          "contact_name": {
            "type": "string",
            "nullable": true
          },
          "contact_email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "contact_phone": {
            "type": "string",
            "nullable": true
          },
          "tier_id": {
            "type": "string",
            "nullable": true
          },
          "custom_benefits": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "display_order": {
            "type": "number",
            "nullable": true
          },
          "is_active": {
            "type": "boolean",
            "default": true
          },
          "featured": {
            "type": "boolean",
            "default": false
          },
          "social_links": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false
      },
      "EventBase2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "sponsor_tiers": {
            "nullable": true
          }
        },
        "required": [
          "slug",
          "title"
        ],
        "additionalProperties": false
      },
      "SponsorDetail": {
        "type": "object",
        "properties": {
          "tier_name": {
            "type": "string",
            "readOnly": true
          },
          "tier_order": {
            "type": "integer",
            "readOnly": true
          },
          "tier_color": {
            "type": "string",
            "readOnly": true
          },
          "tier_info": {
            "type": "object",
            "readOnly": true,
            "additionalProperties": {}
          },
          "id": {
            "type": "integer"
          },
          "event_id": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "website_url": {
            "type": "string",
            "maxLength": 500,
            "nullable": true
          },
          "logo_url": {
            "type": "string",
            "maxLength": 500,
            "nullable": true
          },
          "contact_name": {
            "type": "string",
            "maxLength": 255,
            "nullable": true
          },
          "contact_email": {
            "type": "string",
            "maxLength": 255,
            "nullable": true
          },
          "contact_phone": {
            "type": "string",
            "maxLength": 50,
            "nullable": true
          },
          "tier_id": {
            "type": "string",
            "maxLength": 50,
            "nullable": true
          },
          "custom_benefits": {
            "nullable": true
          },
          "display_order": {
            "type": "number",
            "nullable": true
          },
          "is_active": {
            "type": "boolean",
            "nullable": true
          },
          "featured": {
            "type": "boolean",
            "nullable": true
          },
          "social_links": {
            "nullable": true
          },
          "event": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/EventBase2"
              }
            ]
          }
        },
        "required": [
          "event_id",
          "name"
        ],
        "additionalProperties": false
      },
      "SchemaMeta7": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "website_url": {
            "type": "string",
            "nullable": true
          },
          "logo_url": {
            "type": "string",
            "nullable": true
          },
          "contact_name": {
            "type": "string",
            "nullable": true
          },
          "contact_email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "contact_phone": {
            "type": "string",
            "nullable": true
          },
          "tier_id": {
            "type": "string",
            "nullable": true
          },
          "custom_benefits": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "display_order": {
            "type": "number",
            "nullable": true
          },
          "is_active": {
            "type": "boolean",
            "nullable": true
          },
          "featured": {
            "type": "boolean",
            "nullable": true
          },
          "social_links": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SponsorTierSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "order": {
            "type": "integer"
          },
          "color": {
            "type": "string"
          }
        },
        "required": [
          "color",
          "id",
          "name",
          "order"
        ],
        "additionalProperties": false
      },
      "SchemaMeta8": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "enum": [
              "avatar",
              "event_logo",
              "event_banner",
              "sponsor_logo",
              "event_document",
              "marketing",
              "email_assets"
            ]
          },
          "event_id": {
            "type": "integer"
          }
        },
        "required": [
          "context"
        ],
        "additionalProperties": false
      },
      "ImageUploadResponseSchema": {
        "type": "object",
        "properties": {
          "object_key": {
            "type": "string",
            "readOnly": true
          },
          "bucket": {
            "type": "string",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "context": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "bucket",
          "context",
          "object_key",
          "url"
        ],
        "additionalProperties": false
      },
      "PresignedUrlResponseSchema": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "readOnly": true
          },
          "expires_in": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "expires_in",
          "url"
        ],
        "additionalProperties": false
      },
      "InvitationDetailsResponseSchema": {
        "type": "object",
        "properties": {
          "invitation": {
            "type": "object",
            "additionalProperties": {}
          },
          "user_exists": {
            "type": "boolean"
          },
          "all_invitations": {
            "type": "object",
            "additionalProperties": {}
          }
        },
        "required": [
          "invitation",
          "user_exists"
        ],
        "additionalProperties": false
      },
      "UserRegistrationDataSchema": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 128
          }
        },
        "required": [
          "email",
          "first_name",
          "last_name",
          "password"
        ],
        "additionalProperties": false
      },
      "SchemaMeta9": {
        "type": "object",
        "properties": {
          "user_data": {
            "$ref": "#/components/schemas/UserRegistrationDataSchema"
          },
          "org_invitation_ids": {
            "type": "array",
            "default": [],
            "items": {
              "type": "integer"
            }
          },
          "event_invitation_ids": {
            "type": "array",
            "default": [],
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "user_data"
        ],
        "additionalProperties": false
      },
      "RegisterAndAcceptResponseSchema": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "additionalProperties": {}
          },
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "accepted_invitations": {
            "type": "object",
            "additionalProperties": {}
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "accepted_invitations",
          "access_token",
          "message",
          "refresh_token",
          "user"
        ],
        "additionalProperties": false
      },
      "ModerationStatus": {
        "type": "object",
        "properties": {
          "is_banned": {
            "type": "boolean",
            "readOnly": true
          },
          "banned_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "banned_by": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "ban_reason": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "is_chat_banned": {
            "type": "boolean",
            "readOnly": true
          },
          "chat_ban_until": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "chat_ban_reason": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "moderation_notes": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "can_use_chat": {
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BanUser": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "minLength": 1,
            "maxLength": 500
          },
          "moderation_notes": {
            "type": "string",
            "maxLength": 1000,
            "nullable": true
          }
        },
        "required": [
          "reason"
        ],
        "additionalProperties": false
      },
      "ModerationActionResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "moderation_status": {
            "$ref": "#/components/schemas/ModerationStatus"
          }
        },
        "additionalProperties": false
      },
      "UnbanUser": {
        "type": "object",
        "properties": {
          "moderation_notes": {
            "type": "string",
            "maxLength": 1000,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChatBanUser": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "minLength": 1,
            "maxLength": 500
          },
          "duration_hours": {
            "type": "integer",
            "minimum": 1,
            "maximum": 720,
            "nullable": true
          },
          "moderation_notes": {
            "type": "string",
            "maxLength": 1000,
            "nullable": true
          }
        },
        "required": [
          "reason"
        ],
        "additionalProperties": false
      },
      "ChatUnbanUser": {
        "type": "object",
        "properties": {
          "moderation_notes": {
            "type": "string",
            "maxLength": 1000,
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "responses": {
      "DEFAULT_ERROR": {
        "description": "Default error response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SchemaMeta"
            }
          }
        }
      },
      "UNPROCESSABLE_CONTENT": {
        "description": "Unprocessable Content",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SchemaMeta"
            }
          }
        }
      }
    }
  },
  "paths": {
    "/api/health": {
      "get": {
        "responses": {
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Basic health check for load balancers and monitoring.",
        "description": "This endpoint is intentionally simple and fast. It returns 200 if the\napplication is running, regardless of dependency status. This is useful\nfor Kubernetes liveness probes.\n\nReturns:\n    dict: Basic health status",
        "tags": [
          "health"
        ]
      }
    },
    "/api/health/ready": {
      "get": {
        "responses": {
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Detailed readiness check for Kubernetes and monitoring.",
        "description": "This checks if the application is ready to serve traffic by verifying\nall critical dependencies. Returns 503 if any critical service is down.\nThis is useful for Kubernetes readiness probes.\n\nReturns:\n    dict: Readiness status with dependency details",
        "tags": [
          "health"
        ]
      }
    },
    "/api/health/detailed": {
      "get": {
        "responses": {
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Detailed health check including all services and metrics.",
        "description": "This provides comprehensive information about all application components\nand dependencies. Useful for debugging and detailed monitoring.\n\nNote: This endpoint may be slower due to comprehensive checks.\n\nReturns:\n    dict: Detailed health status with metrics",
        "tags": [
          "health"
        ]
      }
    },
    "/api/health/redis": {
      "get": {
        "responses": {
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Check Redis connectivity and performance metrics.",
        "description": "This endpoint specifically monitors Redis health and performance,\nuseful for debugging Redis-related issues.\n\nReturns:\n    dict: Redis health status and metrics",
        "tags": [
          "health"
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "refresh_token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "429": {
            "description": "Too many login attempts"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          }
        },
        "summary": "Authenticate user",
        "tags": [
          "auth"
        ],
        "description": "Authenticates user credentials and returns tokens"
      }
    },
    "/api/auth/me": {
      "get": {
        "responses": {
          "200": {
            "description": "Current user details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "401": {
            "description": "Not authenticated"
          },
          "404": {
            "description": "User not found"
          }
        },
        "summary": "Get current user",
        "tags": [
          "auth"
        ],
        "description": "Get detailed information about the currently authenticated user"
      }
    },
    "/api/auth/refresh": {
      "post": {
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "401": {
            "description": "Invalid or expired refresh token"
          }
        },
        "summary": "Refresh access token",
        "tags": [
          "auth"
        ],
        "description": "Get new access token using refresh token"
      }
    },
    "/api/auth/socket-token": {
      "get": {
        "responses": {
          "200": {
            "description": "Token retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "401": {
            "description": "Not authenticated"
          }
        },
        "summary": "Get token for WebSocket connection",
        "tags": [
          "auth"
        ],
        "description": "Returns the current JWT token for WebSocket authentication"
      }
    },
    "/api/auth/logout": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully logged out",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "message": "Successfully logged out"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "401": {
            "description": "Invalid token"
          },
          "400": {
            "description": "Token revocation failed",
            "content": {
              "application/json": {
                "example": {
                  "message": "Token revocation failed"
                }
              }
            }
          }
        },
        "summary": "Logout user",
        "tags": [
          "auth"
        ],
        "description": "Revoke current access token"
      }
    },
    "/api/auth/signup": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "201": {
            "description": "User created successfully, verification email sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignupResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Email already registered or invalid input"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Signup"
              }
            }
          }
        },
        "summary": "Register new user",
        "tags": [
          "auth"
        ],
        "description": "Create new user account (requires email verification)"
      }
    },
    "/api/auth/verify-email/{token}": {
      "get": {
        "responses": {
          "200": {
            "description": "Email verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailVerificationResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Invalid or expired token"
          }
        },
        "summary": "Verify email address",
        "tags": [
          "auth"
        ],
        "description": "Verify user email using verification token"
      },
      "parameters": [
        {
          "in": "path",
          "name": "token",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/auth/resend-verification": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "Verification email sent"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Email already verified or rate limit exceeded"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendVerification"
              }
            }
          }
        },
        "summary": "Resend verification email",
        "tags": [
          "auth"
        ],
        "description": "Resend email verification link"
      }
    },
    "/api/auth/forgot-password": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "Reset email sent if account exists"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPassword"
              }
            }
          }
        },
        "summary": "Request password reset",
        "tags": [
          "auth"
        ],
        "description": "Send password reset email"
      }
    },
    "/api/auth/reset-password/{token}": {
      "get": {
        "responses": {
          "200": {
            "description": "Token is valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateResetTokenResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Invalid or expired token"
          }
        },
        "summary": "Validate reset token",
        "tags": [
          "auth"
        ],
        "description": "Check if password reset token is valid"
      },
      "parameters": [
        {
          "in": "path",
          "name": "token",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/auth/reset-password": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "Password reset successfully"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Invalid token or password"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPassword"
              }
            }
          }
        },
        "summary": "Reset password",
        "tags": [
          "auth"
        ],
        "description": "Set new password using reset token"
      }
    },
    "/api/auth/verify-password": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "Password verified successfully"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "401": {
            "description": "Incorrect password"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyPassword"
              }
            }
          }
        },
        "summary": "Verify current password",
        "tags": [
          "auth"
        ],
        "description": "Verify the current user's password for sensitive operations"
      }
    },
    "/api/auth/change-password": {
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "Password changed successfully"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Invalid current password or new password requirements not met"
          },
          "401": {
            "description": "Not authenticated"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePassword"
              }
            }
          }
        },
        "summary": "Change user password",
        "tags": [
          "auth"
        ],
        "description": "Change the current user's password"
      }
    },
    "/api/users/{user_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivacyAwareUser"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to view this user"
          },
          "404": {
            "description": "User not found"
          }
        },
        "summary": "Get user profile",
        "tags": [
          "users"
        ],
        "description": "Get detailed information about a user with privacy filtering"
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Can only update own profile"
          },
          "404": {
            "description": "User not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "summary": "Update user profile",
        "tags": [
          "users"
        ],
        "description": "Update user's own profile information"
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/users/{user_id}/events": {
      "get": {
        "responses": {
          "200": {
            "description": "Paginated list of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "current_page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "self": {
                      "type": "string"
                    },
                    "first": {
                      "type": "string"
                    },
                    "last": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string",
                      "nullable": true
                    },
                    "prev": {
                      "type": "string",
                      "nullable": true
                    },
                    "events": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventBase"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "User not found"
          }
        },
        "summary": "Get user's events",
        "tags": [
          "users"
        ],
        "description": "Get all events a user is participating in",
        "parameters": [
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string"
            },
            "description": "Filter by role in event (optional)",
            "enum": [
              "ADMIN",
              "ORGANIZER",
              "MODERATOR",
              "SPEAKER",
              "ATTENDEE"
            ]
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (default: 1)"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "Items per page (default: 50)"
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/users/{user_id}/speaking-sessions": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "User not found"
          }
        },
        "summary": "Get user's speaking sessions",
        "tags": [
          "users"
        ],
        "description": "Get all sessions where user is speaking",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (default: 1)"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "Items per page (default: 50)"
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/users/{user_id}/dashboard": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResponseSchema"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to view this dashboard"
          },
          "404": {
            "description": "User not found"
          }
        },
        "summary": "Get user dashboard",
        "tags": [
          "users"
        ],
        "description": "Get dashboard data for a user including stats, organizations, events, and connections"
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/users/{user_id}/invitations": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInvitationsResponseSchema"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to view these invitations"
          },
          "404": {
            "description": "User not found"
          }
        },
        "summary": "Get user invitations",
        "tags": [
          "users"
        ],
        "description": "Get all pending invitations for a user (both organization and event invitations)"
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/users/{user_id}/privacy-settings": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivacyResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Can only access own privacy settings"
          },
          "404": {
            "description": "User not found"
          }
        },
        "summary": "Get user privacy settings",
        "tags": [
          "users"
        ],
        "description": "Get privacy settings for a user including event overrides. Users can only access their own privacy settings."
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivacyResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Can only update own privacy settings"
          },
          "404": {
            "description": "User not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrivacySettingsUpdate"
              }
            }
          }
        },
        "summary": "Update user privacy settings",
        "tags": [
          "users"
        ],
        "description": "Update privacy settings for a user. Users can only update their own privacy settings."
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/users/{user_id}/events/{event_id}/privacy-overrides": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivacySettingsResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get user's privacy overrides for an event",
        "tags": [
          "users"
        ],
        "description": "Get event-specific privacy setting overrides"
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivacySettingsResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrivacySettingsUpdate"
              }
            }
          }
        },
        "summary": "Update user's privacy overrides for an event",
        "tags": [
          "users"
        ],
        "description": "Set or update event-specific privacy setting overrides"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Delete user's privacy overrides for an event",
        "tags": [
          "users"
        ],
        "description": "Remove event-specific privacy setting overrides"
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/users/debug": {
      "get": {
        "responses": {
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Debug endpoint",
        "tags": [
          "users"
        ]
      }
    },
    "/api/users/check-email": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCheckResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Missing email parameter"
          }
        },
        "summary": "Check if user exists by email",
        "tags": [
          "users"
        ],
        "description": "Check if a user exists and return their basic info",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Email address to check"
          }
        ]
      }
    },
    "/api/organizations/{org_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to view this organization"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "summary": "Get organization details",
        "tags": [
          "organizations"
        ]
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to update organization"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdate"
              }
            }
          }
        },
        "summary": "Update organization",
        "tags": [
          "organizations"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Must be owner to delete organization"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "summary": "Delete organization",
        "tags": [
          "organizations"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "org_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/organizations": {
      "get": {
        "responses": {
          "200": {
            "description": "Paginated list of organizations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "current_page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "self": {
                      "type": "string"
                    },
                    "first": {
                      "type": "string"
                    },
                    "last": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string",
                      "nullable": true
                    },
                    "prev": {
                      "type": "string",
                      "nullable": true
                    },
                    "organizations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OrganizationBase"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "summary": "List user's organizations",
        "tags": [
          "organizations"
        ],
        "description": "Get all organizations user belongs to",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (default: 1)"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "Items per page (default: 50)"
          }
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreate"
              }
            }
          }
        },
        "summary": "Create new organization",
        "tags": [
          "organizations"
        ]
      }
    },
    "/api/organizations/{org_id}/users": {
      "get": {
        "responses": {
          "200": {
            "description": "Paginated list of organization_users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "current_page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "self": {
                      "type": "string"
                    },
                    "first": {
                      "type": "string"
                    },
                    "last": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string",
                      "nullable": true
                    },
                    "prev": {
                      "type": "string",
                      "nullable": true
                    },
                    "organization_users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OrganizationUser"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to view organization users"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "summary": "List organization users",
        "tags": [
          "organization_users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Organization ID"
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string"
            },
            "description": "Filter by role (optional)",
            "enum": [
              "ADMIN",
              "MEMBER",
              "OWNER"
            ]
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (default: 1)"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "Items per page (default: 50)"
          }
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUserDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserToOrg"
              }
            }
          }
        },
        "summary": "Add user to organization",
        "tags": [
          "organization_users"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "org_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/organizations/{org_id}/users/{user_id}": {
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUserDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Cannot change role of last owner"
          },
          "403": {
            "description": "Not authorized to update role"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUserUpdate"
              }
            }
          }
        },
        "summary": "Update user role",
        "tags": [
          "organization_users"
        ]
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Cannot remove last owner"
          },
          "403": {
            "description": "Not authorized to remove user"
          }
        },
        "summary": "Remove user from organization",
        "tags": [
          "organization_users"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "org_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/organizations/{org_id}/invitations": {
      "get": {
        "responses": {
          "200": {
            "description": "Paginated list of invitations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "current_page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "self": {
                      "type": "string"
                    },
                    "first": {
                      "type": "string"
                    },
                    "last": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string",
                      "nullable": true
                    },
                    "prev": {
                      "type": "string",
                      "nullable": true
                    },
                    "invitations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OrganizationInvitationBase"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to view invitations"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "summary": "List pending invitations",
        "tags": [
          "organization_invitations"
        ],
        "description": "Get all pending invitations for an organization",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Organization ID"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (default: 1)"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "Items per page (default: 50)"
          }
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInvitationDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "examples": {
                  "already_in_org": {
                    "value": {
                      "message": "User already in organization"
                    }
                  },
                  "already_invited": {
                    "value": {
                      "message": "Invitation already sent to this email"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to send invitations"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationInvitationCreate"
              }
            }
          }
        },
        "summary": "Send organization invitation",
        "tags": [
          "organization_invitations"
        ],
        "description": "Send an invitation to join the organization"
      },
      "parameters": [
        {
          "in": "path",
          "name": "org_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/organizations/{org_id}/invitations/bulk": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "201": {
            "description": "Created"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to send invitations"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkOrganizationInvitationCreate"
              }
            }
          }
        },
        "summary": "Bulk send organization invitations",
        "tags": [
          "organization_invitations"
        ],
        "description": "Send multiple invitations at once"
      },
      "parameters": [
        {
          "in": "path",
          "name": "org_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/invitations/organization/{token}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInvitationDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "Invitation not found"
          }
        },
        "summary": "Get invitation details",
        "tags": [
          "organization_invitations"
        ],
        "description": "Get details of an invitation by token"
      },
      "parameters": [
        {
          "in": "path",
          "name": "token",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/invitations/organization/{token}/accept": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "examples": {
                  "expired": {
                    "value": {
                      "message": "Invitation has expired"
                    }
                  },
                  "wrong_email": {
                    "value": {
                      "message": "This invitation is for a different email address"
                    }
                  },
                  "already_member": {
                    "value": {
                      "message": "User already in organization"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invitation not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationInvitationAccept"
              }
            }
          }
        },
        "summary": "Accept organization invitation",
        "tags": [
          "organization_invitations"
        ],
        "description": "Accept an invitation to join an organization"
      },
      "parameters": [
        {
          "in": "path",
          "name": "token",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/invitations/organization/{token}/decline": {
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "examples": {
                  "wrong_email": {
                    "value": {
                      "message": "This invitation is for a different email address"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invitation not found"
          }
        },
        "summary": "Decline organization invitation",
        "tags": [
          "organization_invitations"
        ],
        "description": "Decline an invitation to join an organization"
      },
      "parameters": [
        {
          "in": "path",
          "name": "token",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/organizations/{org_id}/invitations/{invitation_id}": {
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Can only cancel pending invitations"
          },
          "403": {
            "description": "Must be admin or owner to cancel invitations"
          },
          "404": {
            "description": "Invitation not found"
          }
        },
        "summary": "Cancel organization invitation",
        "tags": [
          "organization_invitations"
        ],
        "description": "Cancel a pending invitation"
      },
      "parameters": [
        {
          "in": "path",
          "name": "org_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "invitation_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/organizations/{org_id}/events": {
      "get": {
        "responses": {
          "200": {
            "description": "Paginated list of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "current_page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "self": {
                      "type": "string"
                    },
                    "first": {
                      "type": "string"
                    },
                    "last": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string",
                      "nullable": true
                    },
                    "prev": {
                      "type": "string",
                      "nullable": true
                    },
                    "events": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventBase"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "summary": "List organization events",
        "tags": [
          "events"
        ],
        "description": "Get all events for an organization",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Organization ID",
            "example": 123
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (default: 1)"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "Items per page (default: 50)"
          }
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "example": {
                  "message": "Validation error",
                  "errors": {
                    "start_date": [
                      "Start date must be in the future"
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventCreate"
              }
            }
          }
        },
        "summary": "Create new event",
        "tags": [
          "events"
        ],
        "description": "Create a new event in the organization"
      },
      "parameters": [
        {
          "in": "path",
          "name": "org_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to view this event"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "summary": "Get event details",
        "tags": [
          "events"
        ]
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "example": {
                  "message": "End date cannot be before start date"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to update this event"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventUpdate"
              }
            }
          }
        },
        "summary": "Update event",
        "tags": [
          "events"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Must be organization owner to delete events"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "summary": "Delete event (org owner only)",
        "tags": [
          "events"
        ],
        "description": "Soft deletes an event, clearing sensitive data but preserving it for connection history"
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}/branding": {
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Invalid branding data"
          },
          "403": {
            "description": "Not authorized to update event branding"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventBranding"
              }
            }
          }
        },
        "summary": "Update event branding",
        "tags": [
          "events"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}/users/add": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventUserDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "example": {
                  "message": "User already in event"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to add users to event"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserToEvent"
              }
            }
          }
        },
        "summary": "Add or create user and add to event",
        "tags": [
          "event_users"
        ],
        "description": "Create a new user if needed and add them to the event"
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}/users": {
      "get": {
        "responses": {
          "200": {
            "description": "Paginated list of event_users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "current_page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "self": {
                      "type": "string"
                    },
                    "first": {
                      "type": "string"
                    },
                    "last": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string",
                      "nullable": true
                    },
                    "prev": {
                      "type": "string",
                      "nullable": true
                    },
                    "event_users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventUserBase"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to view event users"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "summary": "List event users",
        "tags": [
          "event_users"
        ],
        "description": "Get all users associated with an event",
        "parameters": [
          {
            "in": "path",
            "name": "event_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Event ID"
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string"
            },
            "description": "Filter by role (optional)",
            "enum": [
              "ADMIN",
              "ORGANIZER",
              "MODERATOR",
              "SPEAKER",
              "ATTENDEE"
            ]
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (default: 1)"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "Items per page (default: 50)"
          }
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventUserDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "example": {
                  "message": "User already in event"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to add users to event"
          },
          "404": {
            "description": "Event or user not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventUserCreate"
              }
            }
          }
        },
        "summary": "Add user to event",
        "tags": [
          "event_users"
        ],
        "description": "Add a user to an event with a specific role"
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}/users/{user_id}": {
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventUserDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Invalid role or information"
          },
          "403": {
            "description": "Not authorized to update user roles"
          },
          "404": {
            "description": "Event user not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventUserUpdate"
              }
            }
          }
        },
        "summary": "Update user role or info",
        "tags": [
          "event_users"
        ],
        "description": "Update a user's role or information in an event"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "example": {
                  "message": "Cannot remove last admin"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to remove users"
          },
          "404": {
            "description": "Event user not found"
          }
        },
        "summary": "Remove user from event",
        "tags": [
          "event_users"
        ],
        "description": "Remove a user from an event"
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}/users/admin": {
      "get": {
        "responses": {
          "200": {
            "description": "Paginated list of event_users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "current_page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "self": {
                      "type": "string"
                    },
                    "first": {
                      "type": "string"
                    },
                    "last": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string",
                      "nullable": true
                    },
                    "prev": {
                      "type": "string",
                      "nullable": true
                    },
                    "event_users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventUserAdmin"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to view admin details"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "summary": "List event users with admin details",
        "tags": [
          "event_users"
        ],
        "description": "Get all users with sensitive information (admin/organizer only)",
        "parameters": [
          {
            "in": "path",
            "name": "event_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Event ID"
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string"
            },
            "description": "Filter by role (optional)",
            "enum": [
              "ADMIN",
              "ORGANIZER",
              "MODERATOR",
              "SPEAKER",
              "ATTENDEE"
            ]
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (default: 1)"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "Items per page (default: 50)"
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}/users/{user_id}/speaker-info": {
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventUserDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Invalid speaker information"
          },
          "403": {
            "description": "Not authorized to update speaker info"
          },
          "404": {
            "description": "Speaker not found or user is not a speaker"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSpeakerInfoUpdate"
              }
            }
          }
        },
        "summary": "Update speaker info",
        "tags": [
          "event_users"
        ],
        "description": "Update speaker information for a user in an event"
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}/invitations": {
      "get": {
        "responses": {
          "200": {
            "description": "Paginated list of invitations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "current_page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "self": {
                      "type": "string"
                    },
                    "first": {
                      "type": "string"
                    },
                    "last": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string",
                      "nullable": true
                    },
                    "prev": {
                      "type": "string",
                      "nullable": true
                    },
                    "invitations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventInvitationBase"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to view invitations"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "summary": "List pending invitations",
        "tags": [
          "event_invitations"
        ],
        "description": "Get all pending invitations for an event",
        "parameters": [
          {
            "in": "path",
            "name": "event_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Event ID"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (default: 1)"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "Items per page (default: 50)"
          }
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventInvitationDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "examples": {
                  "already_in_event": {
                    "value": {
                      "message": "User already in event"
                    }
                  },
                  "already_invited": {
                    "value": {
                      "message": "Invitation already sent to this email"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to send invitations"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventInvitationCreate"
              }
            }
          }
        },
        "summary": "Send event invitation",
        "tags": [
          "event_invitations"
        ],
        "description": "Send an invitation to join the event"
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}/invitations/bulk": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "Bulk invitation results",
            "content": {
              "application/json": {
                "example": {
                  "successful": [
                    {
                      "email": "user1@example.com",
                      "invitation_id": 1
                    },
                    {
                      "email": "user2@example.com",
                      "invitation_id": 2
                    }
                  ],
                  "failed": [
                    {
                      "email": "user3@example.com",
                      "error": "User already in event"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to send invitations"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkEventInvitationCreate"
              }
            }
          }
        },
        "summary": "Send bulk invitations",
        "tags": [
          "event_invitations"
        ],
        "description": "Send multiple invitations at once"
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/invitations/event/{token}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventInvitationDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "Invitation not found"
          }
        },
        "summary": "Get invitation details",
        "tags": [
          "event_invitations"
        ],
        "description": "Get details of an invitation by token"
      },
      "parameters": [
        {
          "in": "path",
          "name": "token",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/invitations/{token}/accept": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "Invitation accepted successfully",
            "content": {
              "application/json": {
                "example": {
                  "message": "Successfully joined event"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Invalid invitation",
            "content": {
              "application/json": {
                "examples": {
                  "expired": {
                    "value": {
                      "message": "Invitation has expired"
                    }
                  },
                  "wrong_email": {
                    "value": {
                      "message": "This invitation is for a different email address"
                    }
                  },
                  "already_member": {
                    "value": {
                      "message": "You are already a member of this event"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invitation not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventInvitationAccept"
              }
            }
          }
        },
        "summary": "Accept invitation",
        "tags": [
          "event_invitations"
        ],
        "description": "Accept an invitation to join an event",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Invitation token"
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "token",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/invitations/{token}/decline": {
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "examples": {
                  "wrong_email": {
                    "value": {
                      "message": "This invitation is for a different email address"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invitation not found"
          }
        },
        "summary": "Decline event invitation",
        "tags": [
          "event_invitations"
        ],
        "description": "Decline an invitation to join an event"
      },
      "parameters": [
        {
          "in": "path",
          "name": "token",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/invitations/{invitation_id}": {
      "delete": {
        "responses": {
          "200": {
            "description": "Invitation cancelled",
            "content": {
              "application/json": {
                "example": {
                  "message": "Invitation cancelled"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Cannot cancel",
            "content": {
              "application/json": {
                "example": {
                  "message": "Can only cancel pending invitations"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to cancel invitation"
          },
          "404": {
            "description": "Invitation not found"
          }
        },
        "summary": "Cancel invitation",
        "tags": [
          "event_invitations"
        ],
        "description": "Cancel a pending invitation"
      },
      "parameters": [
        {
          "in": "path",
          "name": "invitation_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}/sessions": {
      "get": {
        "responses": {
          "200": {
            "description": "Paginated list of sessions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "current_page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "self": {
                      "type": "string"
                    },
                    "first": {
                      "type": "string"
                    },
                    "last": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string",
                      "nullable": true
                    },
                    "prev": {
                      "type": "string",
                      "nullable": true
                    },
                    "sessions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SessionDetail"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "summary": "List event sessions",
        "tags": [
          "sessions"
        ],
        "description": "Get all sessions for an event",
        "parameters": [
          {
            "in": "path",
            "name": "event_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "example": 123
          },
          {
            "in": "query",
            "name": "day_number",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by day number",
            "example": 1
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (default: 1)"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "Items per page (default: 50)"
          }
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "example": {
                  "message": "Session times must be within event dates"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "example": {
                  "message": "You must be an event organizer to create sessions"
                }
              }
            }
          },
          "404": {
            "description": "Event not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionCreate"
              }
            }
          }
        },
        "summary": "Create new session",
        "tags": [
          "sessions"
        ],
        "description": "Create a new session in the event"
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/sessions/{session_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to view this session"
          },
          "404": {
            "description": "Session not found"
          }
        },
        "summary": "Get session details",
        "tags": [
          "sessions"
        ]
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "example": {
                  "message": "Session times must be within event dates"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to update this session"
          },
          "404": {
            "description": "Session not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionUpdate"
              }
            }
          }
        },
        "summary": "Update session",
        "tags": [
          "sessions"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to delete this session"
          },
          "404": {
            "description": "Session not found"
          }
        },
        "summary": "Delete session",
        "tags": [
          "sessions"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/sessions/{session_id}/status": {
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Invalid status"
          },
          "403": {
            "description": "Not authorized to update session status"
          },
          "404": {
            "description": "Session not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionStatusUpdate"
              }
            }
          }
        },
        "summary": "Update session status",
        "tags": [
          "sessions"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/sessions/{session_id}/times": {
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Invalid times",
            "content": {
              "application/json": {
                "example": {
                  "message": "Session times must be within event dates"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to update session times"
          },
          "404": {
            "description": "Session not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionTimesUpdate"
              }
            }
          }
        },
        "summary": "Update session times",
        "tags": [
          "sessions"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/sessions/{session_id}/chat-rooms": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionChatRoom"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to view this session"
          },
          "404": {
            "description": "Session not found"
          }
        },
        "summary": "Get session chat rooms",
        "tags": [
          "sessions"
        ],
        "description": "Get all chat rooms for a session (PUBLIC and BACKSTAGE)"
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/sessions/{session_id}/speakers": {
      "get": {
        "responses": {
          "200": {
            "description": "Paginated list of session_speakers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "current_page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "self": {
                      "type": "string"
                    },
                    "first": {
                      "type": "string"
                    },
                    "last": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string",
                      "nullable": true
                    },
                    "prev": {
                      "type": "string",
                      "nullable": true
                    },
                    "session_speakers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SessionSpeakerBase"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to view session speakers"
          },
          "404": {
            "description": "Session not found"
          }
        },
        "summary": "List session speakers",
        "tags": [
          "session_speakers"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "session_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Session ID"
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string"
            },
            "description": "Filter by role (optional)",
            "enum": [
              "host",
              "speaker",
              "panelist",
              "moderator",
              "keynote"
            ]
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (default: 1)"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "Items per page (default: 50)"
          }
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionSpeakerDetailSchema"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error or speaker conflicts",
            "content": {
              "application/json": {
                "example": {
                  "message": "Already a speaker in this session"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Session or user not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaMeta2"
              }
            }
          }
        },
        "summary": "Add speaker to session",
        "tags": [
          "session_speakers"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/sessions/{session_id}/speakers/{user_id}": {
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionSpeakerDetailSchema"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Invalid role"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Speaker or session not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaMeta3"
              }
            }
          }
        },
        "summary": "Update speaker role",
        "tags": [
          "session_speakers"
        ],
        "description": "Update a speaker's role in the session"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Speaker successfully removed",
            "content": {
              "application/json": {
                "example": {
                  "message": "Speaker removed from session"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Speaker or session not found"
          }
        },
        "summary": "Remove speaker from session",
        "tags": [
          "session_speakers"
        ],
        "description": "Remove a speaker from the session"
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/sessions/{session_id}/speakers/{user_id}/reorder": {
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionSpeakerSchema"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Invalid order",
            "content": {
              "application/json": {
                "example": {
                  "message": "Order must be between 1 and total speakers"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Speaker or session not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaMeta4"
              }
            }
          }
        },
        "summary": "Update speaker order",
        "tags": [
          "session_speakers"
        ],
        "description": "Update the display order of a speaker"
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/connections": {
      "get": {
        "responses": {
          "200": {
            "description": "Paginated list of connections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "current_page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "self": {
                      "type": "string"
                    },
                    "first": {
                      "type": "string"
                    },
                    "last": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string",
                      "nullable": true
                    },
                    "prev": {
                      "type": "string",
                      "nullable": true
                    },
                    "connections": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ConnectionBase"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "List user connections",
        "tags": [
          "connections"
        ],
        "description": "Get all connections for the current user",
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Filter by status (optional)",
            "enum": [
              "pending",
              "accepted",
              "rejected",
              "removed",
              "blocked"
            ]
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (default: 1)"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "Items per page (default: 50)"
          }
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionBase"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "example": {
                  "message": "Connection already exists"
                }
              }
            }
          },
          "404": {
            "description": "Recipient not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionCreate"
              }
            }
          }
        },
        "summary": "Create connection request",
        "tags": [
          "connections"
        ],
        "description": "Send a connection request to another user"
      }
    },
    "/api/connections/{connection_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionBase"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to view this connection"
          },
          "404": {
            "description": "Connection not found"
          }
        },
        "summary": "Get connection details",
        "tags": [
          "connections"
        ]
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionBase"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Invalid status update"
          },
          "403": {
            "description": "Not authorized to update this connection"
          },
          "404": {
            "description": "Connection not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionUpdate"
              }
            }
          }
        },
        "summary": "Update connection status",
        "tags": [
          "connections"
        ],
        "description": "Accept or reject a connection request"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Connection removed successfully"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Can only remove accepted connections"
          },
          "403": {
            "description": "Not authorized to remove this connection"
          },
          "404": {
            "description": "Connection not found"
          }
        },
        "summary": "Remove connection",
        "tags": [
          "connections"
        ],
        "description": "Remove an accepted connection. Either party can remove the connection."
      },
      "parameters": [
        {
          "in": "path",
          "name": "connection_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/connections/pending": {
      "get": {
        "responses": {
          "200": {
            "description": "Paginated list of connections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "current_page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "self": {
                      "type": "string"
                    },
                    "first": {
                      "type": "string"
                    },
                    "last": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string",
                      "nullable": true
                    },
                    "prev": {
                      "type": "string",
                      "nullable": true
                    },
                    "connections": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ConnectionBase"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "List pending connection requests",
        "tags": [
          "connections"
        ],
        "description": "Get all pending connection requests received by the current user",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (default: 1)"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "Items per page (default: 50)"
          }
        ]
      }
    },
    "/api/events/{event_id}/connections": {
      "get": {
        "responses": {
          "200": {
            "description": "Paginated list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "current_page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "self": {
                      "type": "string"
                    },
                    "first": {
                      "type": "string"
                    },
                    "last": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string",
                      "nullable": true
                    },
                    "prev": {
                      "type": "string",
                      "nullable": true
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserBase"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to access this event"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "summary": "List event connections",
        "tags": [
          "connections"
        ],
        "description": "Get all users connected with the current user who are also in this event",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (default: 1)"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "Items per page (default: 50)"
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}/chat-rooms": {
      "get": {
        "responses": {
          "200": {
            "description": "Paginated list of chat_rooms",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "current_page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "self": {
                      "type": "string"
                    },
                    "first": {
                      "type": "string"
                    },
                    "last": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string",
                      "nullable": true
                    },
                    "prev": {
                      "type": "string",
                      "nullable": true
                    },
                    "chat_rooms": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChatRoomBase"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to access this event"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "summary": "List event chat rooms",
        "tags": [
          "chat_rooms"
        ],
        "description": "Get all chat rooms for an event",
        "parameters": [
          {
            "in": "path",
            "name": "event_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Event ID",
            "example": 123
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (default: 1)"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "Items per page (default: 50)"
          }
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatRoomDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "example": {
                  "message": "Validation error",
                  "errors": {
                    "name": [
                      "Name is required"
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to create chat rooms"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRoomCreate"
              }
            }
          }
        },
        "summary": "Create new chat room",
        "tags": [
          "chat_rooms"
        ],
        "description": "Create a new chat room for the event"
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/chat-rooms/{room_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatRoomDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to view this chat room"
          },
          "404": {
            "description": "Chat room not found"
          }
        },
        "summary": "Get chat room details",
        "tags": [
          "chat_rooms"
        ]
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatRoomDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error"
          },
          "403": {
            "description": "Not authorized to update this chat room"
          },
          "404": {
            "description": "Chat room not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRoomUpdate"
              }
            }
          }
        },
        "summary": "Update chat room",
        "tags": [
          "chat_rooms"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to delete this chat room"
          },
          "404": {
            "description": "Chat room not found"
          }
        },
        "summary": "Delete chat room",
        "tags": [
          "chat_rooms"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "room_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/chat-rooms/{room_id}/messages": {
      "get": {
        "responses": {
          "200": {
            "description": "Paginated list of messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "current_page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "self": {
                      "type": "string"
                    },
                    "first": {
                      "type": "string"
                    },
                    "last": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string",
                      "nullable": true
                    },
                    "prev": {
                      "type": "string",
                      "nullable": true
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChatMessageBase"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to access this chat room"
          },
          "404": {
            "description": "Chat room not found"
          }
        },
        "summary": "List chat room messages",
        "tags": [
          "chat_rooms"
        ],
        "description": "Get messages for a chat room with pagination",
        "parameters": [
          {
            "in": "path",
            "name": "room_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Chat Room ID",
            "example": 123
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (default: 1)"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "Items per page (default: 50)"
          }
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessageBase"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error"
          },
          "403": {
            "description": "Not authorized to send messages in this chat room"
          },
          "404": {
            "description": "Chat room not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatMessageCreate"
              }
            }
          }
        },
        "summary": "Send chat message",
        "tags": [
          "chat_rooms"
        ],
        "description": "Send a new message in a chat room"
      },
      "parameters": [
        {
          "in": "path",
          "name": "room_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/chat-rooms/{room_id}/messages/{message_id}": {
      "delete": {
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to moderate messages"
          },
          "404": {
            "description": "Message not found"
          }
        },
        "summary": "Delete (moderate) a chat message",
        "tags": [
          "chat_rooms"
        ],
        "description": "Soft delete a chat message. Only available to event admins and organizers."
      },
      "parameters": [
        {
          "in": "path",
          "name": "room_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "message_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/chat-rooms/{room_id}/toggle": {
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatRoomDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to toggle this chat room"
          },
          "404": {
            "description": "Chat room not found"
          }
        },
        "summary": "Toggle chat room enabled status",
        "tags": [
          "chat_rooms"
        ],
        "description": "Toggle a chat room's enabled/disabled state"
      },
      "parameters": [
        {
          "in": "path",
          "name": "room_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}/chat-rooms/admin": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to access admin view"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "summary": "Get admin view of chat rooms",
        "tags": [
          "chat_rooms"
        ],
        "description": "Get all event-level chat rooms with admin metadata"
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}/chat-rooms/disable-all-public": {
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to disable chat rooms"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "summary": "Disable all public chat rooms",
        "tags": [
          "chat_rooms"
        ],
        "description": "Disable all GLOBAL type chat rooms for the event"
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/chat-rooms/{room_id}/reorder": {
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatRoomDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Invalid display order"
          },
          "403": {
            "description": "Not authorized to reorder chat rooms"
          },
          "404": {
            "description": "Chat room not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaMeta5"
              }
            }
          }
        },
        "summary": "Reorder chat room",
        "tags": [
          "chat_rooms"
        ],
        "description": "Update the display order of a chat room"
      },
      "parameters": [
        {
          "in": "path",
          "name": "room_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/direct-messages/threads": {
      "get": {
        "responses": {
          "200": {
            "description": "Paginated list of threads",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "current_page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "self": {
                      "type": "string"
                    },
                    "first": {
                      "type": "string"
                    },
                    "last": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string",
                      "nullable": true
                    },
                    "prev": {
                      "type": "string",
                      "nullable": true
                    },
                    "threads": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DirectMessageThreadBase"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "List message threads",
        "tags": [
          "direct_messages"
        ],
        "description": "Get all direct message threads for the current user",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (default: 1)"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "Items per page (default: 50)"
          }
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "201": {
            "description": "Thread created or retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectMessageThreadBase"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error"
          },
          "403": {
            "description": "Not authorized to create thread with this user"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectMessageThreadCreate"
              }
            }
          }
        },
        "summary": "Create or get direct message thread",
        "tags": [
          "direct_messages"
        ],
        "description": "Create a new thread or get existing thread between current user and another user"
      }
    },
    "/api/direct-messages/threads/{thread_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectMessageThreadBase"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to view this thread"
          },
          "404": {
            "description": "Thread not found"
          }
        },
        "summary": "Get thread details",
        "tags": [
          "direct_messages"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "thread_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/direct-messages/threads/{thread_id}/messages": {
      "get": {
        "responses": {
          "200": {
            "description": "Messages with thread context",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectMessagesWithContext"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to view these messages"
          },
          "404": {
            "description": "Thread not found"
          }
        },
        "summary": "List thread messages with context",
        "tags": [
          "direct_messages"
        ],
        "description": "Get messages for a thread with pagination and thread context (other user, encryption status)",
        "parameters": [
          {
            "in": "path",
            "name": "thread_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Thread ID",
            "example": 123
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (default: 1)"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "Items per page (default: 50)"
          }
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectMessageBase"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error"
          },
          "403": {
            "description": "Not authorized to send messages in this thread"
          },
          "404": {
            "description": "Thread not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectMessageCreate"
              }
            }
          }
        },
        "summary": "Send direct message",
        "tags": [
          "direct_messages"
        ],
        "description": "Send a new message in a thread"
      },
      "parameters": [
        {
          "in": "path",
          "name": "thread_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/direct-messages/threads/{thread_id}/read": {
      "post": {
        "responses": {
          "200": {
            "description": "Messages marked as read",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarkMessagesReadResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to access this thread"
          },
          "404": {
            "description": "Thread not found"
          }
        },
        "summary": "Mark messages as read",
        "tags": [
          "direct_messages"
        ],
        "description": "Mark all unread messages in a thread as read"
      },
      "parameters": [
        {
          "in": "path",
          "name": "thread_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/direct-messages/threads/{thread_id}/clear": {
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectMessageThreadBase"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to clear this thread"
          },
          "404": {
            "description": "Thread not found"
          }
        },
        "summary": "Clear/hide thread for current user",
        "tags": [
          "direct_messages"
        ],
        "description": "Hide thread from user's view (iMessage-style deletion)"
      },
      "parameters": [
        {
          "in": "path",
          "name": "thread_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}/sponsors": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SponsorListSchema"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "List event sponsors",
        "tags": [
          "sponsors"
        ],
        "description": "Get all sponsors for an event (requires event membership)",
        "parameters": [
          {
            "in": "path",
            "name": "event_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "example": 123
          },
          {
            "in": "query",
            "name": "active_only",
            "schema": {
              "type": "boolean"
            },
            "description": "Only show active sponsors",
            "default": true
          }
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SponsorDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaMeta6"
              }
            }
          }
        },
        "summary": "Create new sponsor",
        "tags": [
          "sponsors"
        ],
        "description": "Create a new sponsor for the event"
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/sponsors/{sponsor_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SponsorDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get sponsor details",
        "tags": [
          "sponsors"
        ],
        "description": "Get detailed information about a sponsor (requires event membership)"
      },
      "patch": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SponsorDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Sponsor not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaMeta7"
              }
            }
          }
        },
        "summary": "Update sponsor",
        "tags": [
          "sponsors"
        ],
        "description": "Update sponsor information"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Sponsor not found"
          }
        },
        "summary": "Delete sponsor",
        "tags": [
          "sponsors"
        ],
        "description": "Delete a sponsor from the event"
      },
      "parameters": [
        {
          "in": "path",
          "name": "sponsor_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}/sponsors/featured": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SponsorListSchema"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "List featured sponsors",
        "tags": [
          "sponsors"
        ],
        "description": "Get featured sponsors for an event (requires event membership)"
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/sponsors/{sponsor_id}/toggle-active": {
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Sponsor not found"
          }
        },
        "summary": "Toggle sponsor active status",
        "tags": [
          "sponsors"
        ],
        "description": "Toggle whether a sponsor is active or inactive"
      },
      "parameters": [
        {
          "in": "path",
          "name": "sponsor_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/sponsors/{sponsor_id}/toggle-featured": {
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Sponsor not found"
          }
        },
        "summary": "Toggle sponsor featured status",
        "tags": [
          "sponsors"
        ],
        "description": "Toggle whether a sponsor is featured"
      },
      "parameters": [
        {
          "in": "path",
          "name": "sponsor_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}/sponsor-tiers": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get sponsor tiers",
        "tags": [
          "sponsors"
        ],
        "description": "Get sponsor tier configuration for an event"
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SponsorTierSchema"
                }
              }
            }
          }
        },
        "summary": "Update sponsor tiers",
        "tags": [
          "sponsors"
        ],
        "description": "Update sponsor tier configuration for an event"
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/uploads/image": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageUploadResponseSchema"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Invalid file or validation error"
          },
          "401": {
            "description": "Authentication required"
          },
          "500": {
            "description": "Server error during upload"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SchemaMeta8"
              }
            }
          }
        },
        "summary": "Upload an image",
        "tags": [
          "uploads"
        ],
        "description": "Upload an image file to storage. Supports JPEG, PNG, GIF, and WebP formats up to 10MB."
      }
    },
    "/api/content/{object_key}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PresignedUrlResponseSchema"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Content not found"
          }
        },
        "summary": "Get authenticated content URL",
        "tags": [
          "uploads"
        ],
        "description": "Get a presigned URL for authenticated content (requires login)"
      },
      "parameters": [
        {
          "in": "path",
          "name": "object_key",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/private/{object_key}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PresignedUrlResponseSchema"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Not authorized to access this content"
          },
          "404": {
            "description": "Content not found"
          }
        },
        "summary": "Get private content URL",
        "tags": [
          "uploads"
        ],
        "description": "Get a presigned URL for private content (requires login and event membership)"
      },
      "parameters": [
        {
          "in": "path",
          "name": "object_key",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/public/{object_key}": {
      "get": {
        "responses": {
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "302": {
            "description": "Redirect to content"
          },
          "404": {
            "description": "Content not found"
          }
        },
        "summary": "Redirect to public content",
        "tags": [
          "uploads"
        ],
        "description": "Redirect to public content URL (no authentication required)"
      },
      "parameters": [
        {
          "in": "path",
          "name": "object_key",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/uploads/{object_key}": {
      "delete": {
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Not authorized to delete this file"
          },
          "404": {
            "description": "File not found"
          }
        },
        "summary": "Delete an uploaded file",
        "tags": [
          "uploads"
        ],
        "description": "Delete an uploaded file from storage"
      },
      "parameters": [
        {
          "in": "path",
          "name": "object_key",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/invitations/{token}": {
      "get": {
        "responses": {
          "200": {
            "description": "Invitation details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationDetailsResponseSchema"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "Invitation not found or invalid token"
          }
        },
        "summary": "Get invitation details by token",
        "tags": [
          "invitations"
        ],
        "description": "Get invitation details and check if user exists. If user doesn't exist, returns all pending invitations for the email."
      },
      "parameters": [
        {
          "in": "path",
          "name": "token",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/invitations/register-and-accept": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "201": {
            "description": "User created and invitations accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterAndAcceptResponseSchema"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "examples": {
                  "user_exists": {
                    "value": {
                      "message": "User already exists with this email"
                    }
                  },
                  "invalid_password": {
                    "value": {
                      "message": "Password must be at least 8 characters"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaMeta9"
              }
            }
          }
        },
        "summary": "Register new user and accept invitations",
        "tags": [
          "invitations"
        ],
        "description": "Create a new user account and accept selected invitations. Organization invitations are processed before event invitations."
      }
    },
    "/api/events/{event_id}/users/{user_id}/moderation-status": {
      "get": {
        "responses": {
          "200": {
            "description": "Moderation status retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModerationStatus"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Not authorized to view moderation status"
          },
          "404": {
            "description": "User not found in event"
          }
        },
        "summary": "Get user moderation status",
        "tags": [
          "moderation"
        ],
        "description": "Get the moderation status for a user in an event"
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}/users/{user_id}/ban": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "User banned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModerationActionResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Cannot ban user (validation error)"
          },
          "403": {
            "description": "Not authorized to ban users"
          },
          "404": {
            "description": "User not found in event"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BanUser"
              }
            }
          }
        },
        "summary": "Ban user from event",
        "tags": [
          "moderation"
        ],
        "description": "Ban a user from an event"
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}/users/{user_id}/unban": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "User unbanned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModerationActionResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Cannot unban user (validation error)"
          },
          "403": {
            "description": "Not authorized to unban users"
          },
          "404": {
            "description": "User not found in event"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnbanUser"
              }
            }
          }
        },
        "summary": "Unban user from event",
        "tags": [
          "moderation"
        ],
        "description": "Unban a user from an event"
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}/users/{user_id}/chat-ban": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "User chat banned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModerationActionResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Cannot chat ban user (validation error)"
          },
          "403": {
            "description": "Not authorized to chat ban users"
          },
          "404": {
            "description": "User not found in event"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatBanUser"
              }
            }
          }
        },
        "summary": "Ban user from chat",
        "tags": [
          "moderation"
        ],
        "description": "Ban a user from chat in an event"
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/events/{event_id}/users/{user_id}/chat-unban": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_CONTENT"
          },
          "200": {
            "description": "User chat unbanned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModerationActionResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Cannot chat unban user (validation error)"
          },
          "403": {
            "description": "Not authorized to chat unban users"
          },
          "404": {
            "description": "User not found in event"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatUnbanUser"
              }
            }
          }
        },
        "summary": "Unban user from chat",
        "tags": [
          "moderation"
        ],
        "description": "Unban a user from chat in an event"
      },
      "parameters": [
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/api/anonstats/js/{script_name}": {
      "get": {
        "responses": {
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "200": {
            "description": "Analytics script content"
          }
        },
        "summary": "Proxy Plausible analytics script",
        "tags": [
          "analytics"
        ],
        "description": "Proxies the Plausible analytics script to bypass ad blockers. Returns JavaScript content or a harmless fallback on error."
      },
      "parameters": [
        {
          "in": "path",
          "name": "script_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/anonstats/event": {
      "post": {
        "responses": {
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "200": {
            "description": "Event forwarded successfully"
          }
        },
        "summary": "Proxy Plausible analytics events",
        "tags": [
          "analytics"
        ],
        "description": "Forwards analytics events to Plausible while preserving client IP for accurate geolocation tracking."
      }
    }
  },
  "info": {
    "title": "Atria API",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "health",
      "description": "Health check endpoints"
    },
    {
      "name": "auth",
      "description": "Authentication operations"
    },
    {
      "name": "users",
      "description": "Operations on users"
    },
    {
      "name": "organizations",
      "description": "Operations on organizations"
    },
    {
      "name": "organization_users",
      "description": "Operations on organization users"
    },
    {
      "name": "organization_invitations",
      "description": "Operations on organization invitations"
    },
    {
      "name": "events",
      "description": "Operations on events"
    },
    {
      "name": "event_users",
      "description": "Operations on event users"
    },
    {
      "name": "event_invitations",
      "description": "Operations on event invitations"
    },
    {
      "name": "sessions",
      "description": "Operations on sessions"
    },
    {
      "name": "session_speakers",
      "description": "Operations on session speakers"
    },
    {
      "name": "connections",
      "description": "Operations on user connections"
    },
    {
      "name": "chat_rooms",
      "description": "Operations on chat rooms"
    },
    {
      "name": "direct_messages",
      "description": "Operations on direct messages"
    },
    {
      "name": "sponsors",
      "description": "Operations on event sponsors"
    },
    {
      "name": "uploads",
      "description": "File upload and storage operations"
    },
    {
      "name": "invitations",
      "description": "Public invitation operations"
    },
    {
      "name": "moderation",
      "description": "Operations for event moderation"
    },
    {
      "name": "analytics",
      "description": "Analytics proxy endpoints"
    }
  ],
  "openapi": "3.0.2"
}